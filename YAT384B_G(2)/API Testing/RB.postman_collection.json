{
	"info": {
		"_postman_id": "12c85ce7-3a3c-4548-b9d7-6f455b2bcd7f",
		"name": "RB",
		"description": "Restful Booker Demo Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44045217",
		"_collection_link": "https://mernatarek-9036942.postman.co/workspace/My-Workspace~42c7cfee-6bb3-4c8d-88ee-fc1d7faacb8c/collection/44045217-12c85ce7-3a3c-4548-b9d7-6f455b2bcd7f?action=share&source=collection_link&creator=44045217"
	},
	"item": [
		{
			"name": "Booking Room",
			"item": [
				{
					"name": "TC1: Verify Successful GET /booking (List Bookings)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array of booking IDs\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.expect(jsonData[0]).to.have.property(\"bookingid\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC2: Verify Successful GET /booking/:id (Get Booking Details)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has booking details\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastname\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalprice\");\r",
									"    pm.expect(jsonData).to.have.property(\"depositpaid\");\r",
									"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/900",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"900"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC3: Verify Successful POST /booking (Create Booking)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has bookingid and details\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
									"    pm.expect(jsonData.booking).to.have.property(\"firstname\").and.equal(\"John\");\r",
									"    pm.expect(jsonData.booking).to.have.property(\"lastname\").and.equal(\"Doe\");\r",
									"});\r",
									"pm.test(\"Store booking ID\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"booking_id\", jsonData.bookingid);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Doe\",\r\n    \"totalprice\": 123,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-01-01\",\r\n        \"checkout\": \"2023-01-05\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC5: Verify Successful POST /auth (Authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"pm.test(\"Store auth token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"auth_token\", jsonData.token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC6: Verify Successful PUT /booking/:id (Update Booking)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has updated booking details\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.equal(\"Jane\");\r",
									"    pm.expect(jsonData.totalprice).to.equal(456);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jane\",\r\n    \"lastname\": \"Doe\",\r\n    \"totalprice\": 456,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-02-01\",\r\n        \"checkout\": \"2023-02-05\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/262",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"262"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC7: Verify Successful PATCH /booking/:id (Partial Update)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has partially updated details\", () => {\r",
									"    const jsonNormandy = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.equal(\"Johnny\");\r",
									"    pm.expect(jsonData.totalprice).to.equal(789);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Johnny\",\r\n    \"totalprice\": 789\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/262",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"262"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC8: Verify POST /booking with Missing Required Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\": \"Doe\",\r\n    \"totalprice\": 123,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-01-01\",\r\n        \"checkout\": \"2023-01-05\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC9: Verify POST /booking with Invalid Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"John\",\r\n    \"lastname\": \"Doe\",\r\n    \"totalprice\": 123,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"5-2\",\r\n        \"checkout\": \"2023-01-05\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC10: Verify GET /booking/:id with Non-Existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response body is Not Found\", () => {\r",
									"    pm.expect(pm.response.text()).to.equal(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC11: Verify POST /booking with Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC12: Verify POST /auth with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has no token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.have.property(\"token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"wrongpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC13: Verify PUT /booking/:id without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jane\",\r\n    \"lastname\": \"Doe\",\r\n    \"totalprice\": 456,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-02-01\",\r\n        \"checkout\": \"2023-02-05\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"50"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Login",
			"item": [
				{
					"name": "TC14: Verify Successful Admin Login with Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"pm.test(\"Store auth token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"auth_token\", jsonData.token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC15: Verify Admin Can Access Bookings After Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array of booking IDs\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.expect(jsonData[0]).to.have.property(\"bookingid\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC16: Verify Invalid Admin Credentials Return an Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response indicates invalid credentials\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.have.property(\"token\");\r",
									"    pm.expect(jsonData).to.have.property(\"reason\").and.equal(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"wrongpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC17: Verify Missing Username in Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response indicates missing username\", () => {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.include(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "This endpoint is used to authenticate a user via HTTP POST request to {{base_url}}/auth. The request should include a payload with the raw request body type, containing the user's password.\n\n### Request Body\n\n- `password`: (string) The user's password.\n    \n\n### Response\n\nUpon successful execution, the endpoint returns a status code of 200 and a response in JSON format with the following key:\n\n- `reason`: (string) An empty string indicating successful authentication."
					},
					"response": []
				},
				{
					"name": "TC18: Verify Missing Password in Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response indicates missing password\", () => {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.include(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC19: Verify Token Usage for Protected Endpoint (PUT /booking/:id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has updated booking details\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstname).to.equal(\"Jane\");\r",
									"    pm.expect(jsonData.totalprice).to.equal(456);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jane\",\r\n    \"lastname\": \"Doe\",\r\n    \"totalprice\": 456,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2023-02-01\",\r\n        \"checkout\": \"2023-02-05\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/25",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"25"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cancel a Booking",
			"item": [
				{
					"name": "TC20: Verify Successful Cancellation of a Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 204\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 204]);\r",
									"});\r",
									"pm.test(\"Response body matches expected\", () => {\r",
									"    if (pm.response.code === 201) {\r",
									"        pm.expect(pm.response.text()).to.equal(\"Created\");\r",
									"    } else {\r",
									"        pm.expect(pm.response.text()).to.equal(\"\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/90",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"90"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC21: Verify Booking is Removed After Cancellation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response indicates booking not found\", () => {\r",
									"    pm.expect(pm.response.text()).to.equal(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/90",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"90"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC22: Verify Cancellation with Invalid Booking ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 405\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 405]);\r",
									"});\r",
									"pm.test(\"Response indicates error\", () => {\r",
									"    pm.expect(pm.response.text()).to.be.oneOf([\"Not Found\", \"Method Not Allowed\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC23: Verify Cancellation of Already Deleted Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 405\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 405]);\r",
									"});\r",
									"pm.test(\"Response indicates error\", () => {\r",
									"    pm.expect(pm.response.text()).to.be.oneOf([\"Not Found\", \"Method Not Allowed\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/90",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"90"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC24: Verify Cancellation Without Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/81",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"81"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC25: Verify Cancellation with Invalid Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token=5569974",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/3005",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"3005"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Room Availability",
			"item": [
				{
					"name": "TC26: Verify Check Room Availability with Valid Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2023-01-01&checkout=2023-01-05",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2023-01-01"
								},
								{
									"key": "checkout",
									"value": "2023-01-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC27: Verify JSON Response Includes Room Type, Availability Status, and Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response includes booking details\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalprice\"); // Price field\r",
									"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/496",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"496"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC28: Verify Error for Missing Checkin Date Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 200\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 200]);\r",
									"});\r",
									"pm.test(\"Response indicates error or unfiltered results\", () => {\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
									"    } else {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.be.an(\"array\"); // Unfiltered results if API ignores missing param\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkout=2023-01-05",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkout",
									"value": "2023-01-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC29: Verify Error for Invalid Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 200\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 200]);\r",
									"});\r",
									"pm.test(\"Response indicates error or unfiltered results\", () => {\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
									"    } else {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.be.an(\"array\"); // Unfiltered results\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2033-01-05&checkout=2023-01-05",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2033-01-05"
								},
								{
									"key": "checkout",
									"value": "2023-01-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC30: Verify Error for Missing Checkout Date Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 200\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 200]);\r",
									"});\r",
									"pm.test(\"Response indicates error or unfiltered results\", () => {\r",
									"    if (pm.response.code === 400) {\r",
									"        pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
									"    } else {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.be.an(\"array\"); // Unfiltered results\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2023-01-01",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2023-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC31: Verify Response Time for Availability Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2023-01-01&checkout=2023-01-05",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2023-01-01"
								},
								{
									"key": "checkout",
									"value": "2023-01-05"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Booking",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Token (take it and change it in your env))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has token\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							"pm.test(\"Store auth token\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.environment.set(\"auth_token\", jsonData.token);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		}
	]
}